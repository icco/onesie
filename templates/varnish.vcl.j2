# Marker to tell the VCL compiler that this VCL has been adapted to the
# new 4.0 format.
vcl 4.0;

import std;

# GCS backend
backend gcs {
  .host = "127.0.0.1";
  .port = "8080";
}

# Status Server backend
backend status {
  .host = "127.0.0.1";
  .port = "9090";
}

# Happens before we check if we have this in cache already.
#
# Typically you clean up the request here, removing cookies you don't need,
# rewriting the request, etc.
sub vcl_recv {
  if (req.url ~ "^/.well-known/onesie/") {
    set req.backend_hint = status;
    return (hash);
  }

  set req.backend_hint = gcs;

  if (req.url ~ "^/.well-known/acme-challenge/") {
    set req.url = "/onesie-configs/www" + req.url;
    return (hash);
  }

  set req.url = regsub(req.url, "\?.*", "");
  if (req.url ~ "/$") {
    set req.url = req.url + "index.html";
  }
  set req.url = "/onesie/" + std.tolower(req.http.Host) + req.url;
}

# Happens after we have read the response headers from the backend.
#
# Here you clean the response headers, removing silly Set-Cookie headers and
# other mistakes your backend does.
sub vcl_backend_response {
}

# Happens when we have all the pieces we need, and are about to send the
# response to the client.
#
# You can do accounting or modifying the final object here.
sub vcl_deliver {

  # Cleanup headers
  set resp.http.Server = "Onesie";
  unset resp.http.X-GUploader-UploadID;
  unset resp.http.x-goog-generation;
  unset resp.http.x-goog-metageneration;
  unset resp.http.x-goog-stored-content-encoding;
  unset resp.http.x-goog-stored-content-length;
  unset resp.http.x-goog-hash;
  unset resp.http.x-goog-hash;
  unset resp.http.x-goog-storage-class;
  unset resp.http.X-Varnish;
  unset resp.http.Via;

  # Set HSTS headers for one day
  set resp.http.Strict-Transport-Security = "max-age=2592000; includeSubDomains";

  # Set Referer Policy
  set resp.http.Referrer-Policy = "same-origin";
}
